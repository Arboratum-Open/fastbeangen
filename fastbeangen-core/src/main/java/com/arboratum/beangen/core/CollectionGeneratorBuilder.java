package com.arboratum.beangen.core;

import com.arboratum.beangen.BaseBuilders;
import com.arboratum.beangen.Generator;
import com.google.common.collect.ImmutableSet;
import org.apache.commons.math3.stat.Frequency;

import java.util.*;

/**
 * Created by gpicron on 08/08/2016.
 */
public class CollectionGeneratorBuilder<VALUE, COL extends Collection<VALUE>> extends AbstractGeneratorBuilder<COL> {

    public static final ImmutableSet<Class> SUPPORTED_TYPES = ImmutableSet.of(
            List.class, Set.class
    );


    public CollectionGeneratorBuilder(Class<COL> fieldType) {
        super(fieldType);
    }

    /**
     * Produces a collection with uniform size distribution between min and max (inclusive) of values generated by the valueGenerator
     *
     * @param min
     * @param max
     * @param valueGenerator
     * @return
     */
    public CollectionGeneratorBuilder<VALUE, COL> of(int min, int max, AbstractGeneratorBuilder<VALUE> valueGenerator ) {
        return of(min, max, valueGenerator.build());
    }

    /**
     * Produces a collection with uniform size distribution between min and max (inclusive) of values generated by the valueGenerator
     *
     * @param min
     * @param max
     * @param valueGenerator
     * @return
     */
    public CollectionGeneratorBuilder<VALUE, COL> of(int min, int max, Generator<VALUE> valueGenerator) {
        return of(BaseBuilders.aInteger().uniform(min, max).build(), valueGenerator);
    }

    /**
     * Produces a collection with size distribution given by the frequency table of values generated by the valueGenerator
     *
     * @param sizeFrequency a frequency with Integer as key
     * @param valueGenerator
     * @return
     */
    public CollectionGeneratorBuilder<VALUE, COL> of(Frequency sizeFrequency, AbstractGeneratorBuilder<VALUE> valueGenerator) {
        return of(BaseBuilders.enumerated(Integer.class).from(sizeFrequency).build(), valueGenerator.build());
    }

    /**
     * Produces a collection with size distribution given by the frequency table of values generated by the valueGenerator
     *
     * @param sizeFrequency a frequency with Integer as key
     * @param valueGenerator
     * @return
     */
    public CollectionGeneratorBuilder<VALUE, COL> of(Frequency sizeFrequency, Generator<VALUE> valueGenerator) {
        return of(BaseBuilders.enumerated(Integer.class).from(sizeFrequency).build(), valueGenerator);
    }

    /**
     * Produces a collection with size generated by the sizeGenerator between min and max (inclusive) of values generated by the valueGenerator
     *
     * @param sizeGenerator
     * @param valueGenerator
     * @return
     */
    public CollectionGeneratorBuilder<VALUE, COL> of(Generator<? extends Number> sizeGenerator, Generator<VALUE> valueGenerator) {
        if (fieldType.isAssignableFrom(HashSet.class)) {
            setup(randomSequence -> {
                int size = sizeGenerator.apply(randomSequence).intValue();
                Set r = new HashSet(size);

                for (int i = 0; i < size; i++) {
                    r.add(valueGenerator.generate(randomSequence));
                }
                return (COL)r;
            });
        } else if (fieldType.isAssignableFrom(ArrayList.class)) {
            setup(randomSequence -> {
                int size = sizeGenerator.apply(randomSequence).intValue();
                ArrayList r = new ArrayList(size);

                for (int i = 0; i < size; i++) {
                    r.add(valueGenerator.generate(randomSequence));
                }
                return (COL)r;
            });

        }
        return this;
    }

}
